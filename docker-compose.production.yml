version: '3.8'

services:
  # Main DHI Application
  dhi-app:
    build: .
    container_name: dhi-analytics
    ports:
      - "8080:8080"  # Plaid API Service
      - "8081:8081"  # Frontend Dashboard
    environment:
      - NODE_ENV=production
      - PYTHONPATH=/app
      - PLAID_CLIENT_ID=${PLAID_CLIENT_ID}
      - PLAID_SECRET=${PLAID_SECRET}
      - PLAID_ENV=${PLAID_ENV:-sandbox}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=dhi_analytics
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./frontend/uploads:/app/frontend/uploads
      - ./frontend/media:/app/frontend/media
      - ./frontend/audio:/app/frontend/audio
    depends_on:
      - postgres
      - neo4j
      - redis
    networks:
      - dhi-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: dhi-postgres
    environment:
      - POSTGRES_DB=dhi_analytics
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - dhi-network
    restart: unless-stopped

  # Neo4j Graph Database
  neo4j:
    image: neo4j:5.12
    container_name: dhi-neo4j
    environment:
      - NEO4J_AUTH=neo4j/password
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*,gds.*
      - NEO4J_dbms_memory_heap_initial_size=1G
      - NEO4J_dbms_memory_heap_max_size=2G
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    networks:
      - dhi-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: dhi-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - dhi-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Nginx Reverse Proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: dhi-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - dhi-app
    networks:
      - dhi-network
    restart: unless-stopped

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: dhi-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - dhi-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana Dashboard (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: dhi-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - dhi-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
  neo4j_data:
  neo4j_logs:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  dhi-network:
    driver: bridge
